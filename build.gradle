buildscript {
  ext {
    springBootVersion = '2.0.1.RELEASE'
  }
  repositories {
    mavenCentral()
    jcenter()
  }
  dependencies {
    classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
  }
}

def void appendTrySpringsCommonDependencies(DependencyHandler d) {
  d.compile project(':trysprings-common')
  d.compile project(':trysprings-common').sourceSets.main.output
  d.testCompile project(':trysprings-common')
  d.testCompile project(':trysprings-common').sourceSets.main.output

  d.testCompile 'org.springframework.boot:spring-boot-starter-test'
  d.testCompile group: 'com.h2database', name: 'h2', version: '1.4.197'
}
def void appendSpringBootWebDependencies(DependencyHandler d) {
  d.compile 'org.springframework.boot:spring-boot-starter-web'
  d.compile 'org.springframework.boot:spring-boot-starter-thymeleaf'
}

allprojects {
  apply plugin: 'java'
  apply plugin: 'application'
  apply plugin: 'pmd'
  apply plugin: 'idea'
  apply plugin: 'org.springframework.boot'
  apply plugin: 'io.spring.dependency-management'

  ext {
    pmdVersion = '6.3.0'
    junitVersion = '5.2.0'
  }

  [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'
  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  group = 'com.github.hatimiti'
  version = '0.0.1-SNAPSHOT'

  repositories {
    mavenCentral()
    jcenter()
  }

  dependencies {
    compile 'org.hsqldb:hsqldb'

    testCompile "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"

    pmd "net.sourceforge.pmd:pmd:${pmdVersion}"
    pmd "net.sourceforge.pmd:pmd-core:${pmdVersion}"
    pmd "net.sourceforge.pmd:pmd-java:${pmdVersion}"
  }

  mainClassName = ''

  // Adds scope of provided 
  configurations {
    provided
  }
  sourceSets {
    main.compileClasspath += configurations.provided
    test.compileClasspath += configurations.provided
    test.runtimeClasspath += configurations.provided
  }
  test {
    classpath += configurations.provided
  }
  run {
    classpath += configurations.provided
  }

  pmd { // コーディングチェック
    ignoreFailures = true
    sourceSets = [sourceSets.main]
    reportsDir = file("${project.buildDir}/reports/pmd")
    /*
     * https://pmd.github.io/pmd-6.3.0/pmd_rules_java.html
     * https://github.com/pmd/pmd/
     */
    ruleSetFiles = files("${project.rootDir}/pmdRuleSet.xml")
  }
}

project("dummy") {
  dependencies {
    appendTrySpringsCommonDependencies(delegate)
    appendSpringBootWebDependencies(delegate)
  }
  task runDummy(type: JavaExec) {
    main = 'com.github.hatimiti.spring.dummy.Main'
    classpath = sourceSets.main.runtimeClasspath
  }
}

project("spring-actuator") {
  dependencies {
    appendTrySpringsCommonDependencies(delegate)
    appendSpringBootWebDependencies(delegate)
    compile 'org.springframework.boot:spring-boot-starter-actuator'
  }
  task runActuator(type: JavaExec) {
    main = 'com.github.hatimiti.spring.actuator.Main'
    classpath = sourceSets.main.runtimeClasspath
  }
}

project("spring-aspects") {
  dependencies {
    appendTrySpringsCommonDependencies(delegate)
    appendSpringBootWebDependencies(delegate)
    compile('org.springframework.boot:spring-boot-starter-aop')
  }
  task runAspects(type: JavaExec) {
    main = 'com.github.hatimiti.spring.aspects.Main'
    classpath = sourceSets.main.runtimeClasspath
  }
}

project("spring-data-cassandra") {
  dependencies {
    appendTrySpringsCommonDependencies(delegate)
    appendSpringBootWebDependencies(delegate)
    compile 'org.springframework.data:spring-data-cassandra'
    testCompile group: 'org.cassandraunit', name: 'cassandra-unit-spring', version: '3.3.0.2'
  }
  task runCassandra(type: JavaExec) {
    main = 'com.github.hatimiti.spring.cassandra.Main'
    classpath = sourceSets.main.runtimeClasspath
  }
}

project("spring-data-jpa") {
  dependencies {
    appendTrySpringsCommonDependencies(delegate)
    compile 'org.springframework.boot:spring-boot-starter-jdbc'
    compile 'javax.xml.bind:jaxb-api'
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
  }
  task runDataJpa(type: JavaExec) {
    main = 'com.github.hatimiti.spring.data.jpa.Main'
    classpath = sourceSets.main.runtimeClasspath
  }
}

project("spring-di") {
  dependencies {
    appendTrySpringsCommonDependencies(delegate)
    compile 'javax.inject:javax.inject:1'
  }
  task runDI(type: JavaExec) {
    main = 'com.github.hatimiti.spring.di.Main'
    classpath = sourceSets.main.runtimeClasspath
  }
}

project("spring-lifecycle") {
  dependencies {
    appendTrySpringsCommonDependencies(delegate)
  }
  task runLifecycle(type: JavaExec) {
    main = 'com.github.hatimiti.spring.lifecycle.Main'
    classpath = sourceSets.main.runtimeClasspath
  }
}

project("spring-profiles") {
  dependencies {
    appendTrySpringsCommonDependencies(delegate)
    compile "org.springframework.boot:spring-boot-starter-validation"
  }
  task runProfiles(type: JavaExec) {
    main = 'com.github.hatimiti.spring.profiles.Main'
    classpath = sourceSets.main.runtimeClasspath
  }
}

project("spring-security-oauth2") {
  dependencies {
    appendTrySpringsCommonDependencies(delegate)
    appendSpringBootWebDependencies(delegate)
    compile "org.springframework.boot:spring-boot-starter-security"
    compile "org.springframework.security:spring-security-oauth2-client"
    compile "org.springframework.security:spring-security-oauth2-jose"
    compile "org.thymeleaf.extras:thymeleaf-extras-springsecurity4"
  }
  task runActuator(type: JavaExec) {
    main = 'com.github.hatimiti.spring.security.Main'
    classpath = sourceSets.main.runtimeClasspath
  }
}

project("trysprings-common") {
  dependencies {
    compile 'org.springframework.boot:spring-boot-starter'
    compile 'org.springframework:spring-tx'
    compile 'org.springframework:spring-jdbc'
    compile 'javax.transaction:javax.transaction-api'
    runtime 'org.springframework.boot:spring-boot-devtools'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
  }
}
