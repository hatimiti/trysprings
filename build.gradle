buildscript {
  ext {
    springBootVersion = '2.0.1.RELEASE'
  }
  repositories {
    mavenCentral()
    jcenter()
  }
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
  }
}

group = 'com.github.hatimiti'
version = '0.0.1-SNAPSHOT'

allprojects {
  apply plugin: 'java'
  apply plugin: 'application'
  apply plugin: 'idea'
  apply plugin: 'org.springframework.boot'
  apply plugin: 'io.spring.dependency-management'

  repositories {
    mavenCentral()
    jcenter()
  }

  dependencies {
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-thymeleaf'
    compile 'com.h2database:h2'
    runtime 'org.springframework.boot:spring-boot-devtools'

    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'org.junit.jupiter:junit-jupiter-api:5.2.0'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.2.0'
  }

  mainClassName = ''

  // Adds scope of provided 
  configurations {
    provided
  }
  sourceSets {
    main.compileClasspath += configurations.provided
    test.compileClasspath += configurations.provided
    test.runtimeClasspath += configurations.provided
  }
  test {
    classpath += configurations.provided
  }
  run {
    classpath += configurations.provided
  }
}

configure(allprojects) { project ->
  compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    options.encoding = 'UTF-8'
  }
  compileTestJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    options.encoding = 'UTF-8'
  }
}

project("dummy") {
  dependencies {
  }
  task runDummy(type: JavaExec) {
    main = 'com.github.hatimiti.spring.dummy.Main'
    classpath = sourceSets.main.runtimeClasspath
  }
}

project("spring-actuator") {
  dependencies {
    compile 'org.springframework.boot:spring-boot-starter-actuator'
  }
  task runActuator(type: JavaExec) {
    main = 'com.github.hatimiti.spring.actuator.Main'
    classpath = sourceSets.main.runtimeClasspath
  }
}

project("spring-aspects") {
  dependencies {
    compile('org.springframework.boot:spring-boot-starter-aop')
  }
  task runAspects(type: JavaExec) {
    main = 'com.github.hatimiti.spring.aspects.Main'
    classpath = sourceSets.main.runtimeClasspath
  }
}

project("spring-cassandra") {
  dependencies {
    compile 'org.springframework.data:spring-data-cassandra'
    testCompile group: 'org.cassandraunit', name: 'cassandra-unit-spring', version: '3.3.0.2'
  }
  task runCassandra(type: JavaExec) {
    main = 'com.github.hatimiti.spring.cassandra.Main'
    classpath = sourceSets.main.runtimeClasspath
  }
}

project("spring-data-jpa") {
  dependencies {
    compile 'org.springframework.boot:spring-boot-starter-jdbc'
    compile 'javax.xml.bind:jaxb-api'
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
  }
  task runDataJpa(type: JavaExec) {
    main = 'com.github.hatimiti.spring.data.jpa.Main'
    classpath = sourceSets.main.runtimeClasspath
  }
}

project("spring-security-oauth2") {
  dependencies {
    compile "org.springframework.boot:spring-boot-starter-security"
    compile "org.springframework.security:spring-security-oauth2-client"
    compile "org.springframework.security:spring-security-oauth2-jose"
    compile "org.thymeleaf.extras:thymeleaf-extras-springsecurity4"
  }
  task runActuator(type: JavaExec) {
    main = 'com.github.hatimiti.spring.security.Main'
    classpath = sourceSets.main.runtimeClasspath
  }
}
